datatype Operations = load | store

VARIABLE :: (Complete a, Set a) => (a=>Event, a=>Event, a) -> Proc
VARIABLE(get, set, val) =
    get!val -> VARIABLE(get, set, val)
    []
    set?newVal -> VARIABLE(get, set, newVal)

ATOMIC_VARIABLE :: (Complete a, Set a, Eq a) => (a=>Event, a=>Event, a=>a=>Bool=>Event, a) -> Proc
ATOMIC_VARIABLE(get, set, cas, val) =
    get!val -> ATOMIC_VARIABLE(get, set, cas, val)
    []
    set?newVal -> ATOMIC_VARIABLE(get, set, cas, newVal)
    []
    cas?expected?newVal!(expected == val) ->
    if expected == val then
        ATOMIC_VARIABLE(get, set, cas, newVal)
    else
        ATOMIC_VARIABLE(get, set, cas, val)