include "init.csp"

-- Maximum length of queue allowed
MAX_QUEUE_LENGTH = 4

-- The processes using the queue
datatype Processes = P1 | P2 | P3 | P4

-- Observed events
channel dequeue, end_enqueue : Processes
channel enqueue : Processes.Integers_Not_Null
channel return : Processes.Integers
channel simple_enqueue : Processes.Integers_Not_Null
channel simple_dequeue : Processes.Integers

MSYSTEM(users) =
(
    MQueue::IMPLEMENTATION(users) 
    [| union(mem::alphaCREATE_QUEUE, mem::alphaMEMORY) |]
    mem::MEMORY
) \ mem::alphaMEMORY

JSYSTEM(users) =
(
    JQueue::IMPLEMENTATION(users)
    [| union(mem::alphaCREATE_QUEUE, mem::alphaMEMORY) |]
    mem::MEMORY
) \ mem::alphaMEMORY

-- Safety checks for specifications. deadlock/divergence
-- Single user
assert SeqQueue::SPEC({P1}) :[deadlock free[FD]] :[partial order reduce]
assert SeqQueue::SPEC({P1}) :[divergence free[FD]] :[partial order reduce]
assert ConcQueue::SPEC({P1}) :[deadlock free[FD]]
assert ConcQueue::SPEC({P1}) :[divergence free[FD]]
-- Two user
assert SeqQueue::SPEC({P1, P2}) :[deadlock free[FD]] :[partial order reduce]
assert SeqQueue::SPEC({P1, P2}) :[divergence free[FD]] :[partial order reduce]
assert ConcQueue::SPEC({P1, P2}) :[deadlock free[FD]]
assert ConcQueue::SPEC({P1, P2}) :[divergence free[FD]]

-- Safety checks for paper implementation
-- Single user
assert MSYSTEM({P1}) :[deadlock free[FD]]
assert MSYSTEM({P1}) :[divergence free[FD]]
-- Two users
assert MSYSTEM({P1, P2}) :[deadlock free[FD]]
assert MSYSTEM({P1, P2}) :[divergence free[FD]]
-- Three users
assert MSYSTEM({P1, P2, P3}) :[deadlock free[FD]]
assert MSYSTEM({P1, P2, P3}) :[divergence free[FD]]

-- Safety checks for Java implementation
-- Single user
assert JSYSTEM({P1}) :[deadlock free[FD]] :[partial order reduce]
assert JSYSTEM({P1}) :[divergence free[FD]] :[partial order reduce]
-- Two users
assert JSYSTEM({P1, P2}) :[deadlock free[FD]] :[partial order reduce]
assert JSYSTEM({P1, P2}) :[divergence free[FD]] :[partial order reduce]
-- Three users
assert JSYSTEM({P1, P2, P3}) :[deadlock free[FD]] :[partial order reduce]
assert JSYSTEM({P1, P2, P3}) :[divergence free[FD]] :[partial order reduce]

-- Is the Java implementation equivalent (externally) to Michael et. al.'s work?
assert MSYSTEM({P1}) [T= JSYSTEM({P1}) :[partial order reduce]
assert MSYSTEM({P1}) [F= JSYSTEM({P1}) :[partial order reduce]
assert JSYSTEM({P1}) [T= MSYSTEM({P1}) :[partial order reduce]
assert JSYSTEM({P1}) [F= MSYSTEM({P1}) :[partial order reduce]
assert MSYSTEM({P1, P2}) [T= JSYSTEM({P1, P2}) :[partial order reduce]
assert MSYSTEM({P1, P2}) [F= JSYSTEM({P1, P2}) :[partial order reduce]
assert JSYSTEM({P1, P2}) [T= MSYSTEM({P1, P2}) :[partial order reduce]
assert JSYSTEM({P1, P2}) [F= MSYSTEM({P1, P2}) :[partial order reduce]
assert MSYSTEM({P1, P2, P3}) [T= JSYSTEM({P1, P2, P3}) :[partial order reduce]
assert MSYSTEM({P1, P2, P3}) [F= JSYSTEM({P1, P2, P3}) :[partial order reduce]
assert JSYSTEM({P1, P2, P3}) [T= MSYSTEM({P1, P2, P3}) :[partial order reduce]
assert JSYSTEM({P1, P2, P3}) [F= MSYSTEM({P1, P2, P3}) :[partial order reduce]
assert MSYSTEM({P1, P2, P3, P4}) [T= JSYSTEM({P1, P2, P3, P4}) :[partial order reduce]
assert MSYSTEM({P1, P2, P3, P4}) [F= JSYSTEM({P1, P2, P3, P4}) :[partial order reduce]
assert JSYSTEM({P1, P2, P3, P4}) [T= MSYSTEM({P1, P2, P3, P4}) :[partial order reduce]
assert JSYSTEM({P1, P2, P3, P4}) [F= MSYSTEM({P1, P2, P3, P4}) :[partial order reduce]

-- For single user behaviour, is the concurrent queue equivalent to the sequential queue?
-- It should be, as without concurrent users the concurrent queue should be sequential
assert SeqQueue::SPEC({P1}) [F= ConcQueue::SPEC({P1}) :[partial order reduce]
assert ConcQueue::SPEC({P1}) [F= SeqQueue::SPEC({P1}) :[partial order reduce]
-- But for two processes, only traces in one direction
assert not SeqQueue::SPEC({P1, P2}) [T= ConcQueue::SPEC({P1, P2}) :[partial order reduce]
assert ConcQueue::SPEC({P1, P2}) [T= SeqQueue::SPEC({P1, P2}) :[partial order reduce]

-- For a single user, MSYSTEM (Michael et. al.'s original paper) should also be like the
-- sequential queue
assert MSYSTEM({P1}) [F= SeqQueue::SPEC({P1}) :[partial order reduce]
assert SeqQueue::SPEC({P1}) [F= MSYSTEM({P1}) :[partial order reduce]
-- But for two (or more) processes, only traces in one direction
assert not SeqQueue::SPEC({P1, P2}) [T= MSYSTEM({P1, P2}) :[partial order reduce]
assert MSYSTEM({P1, P2}) [T= SeqQueue::SPEC({P1, P2}) :[partial order reduce]

-- However, MSYSTEM is equivalent to concurrent queue in both directions
assert MSYSTEM({P1}) [F= ConcQueue::SPEC({P1})
assert ConcQueue::SPEC({P1}) [F= MSYSTEM({P1}) :[partial order reduce]
-- And also for two processes
assert MSYSTEM({P1, P2}) [F= ConcQueue::SPEC({P1, P2})
assert ConcQueue::SPEC({P1, P2}) [F= MSYSTEM({P1, P2}) :[partial order reduce]
-- And also for three processes
assert MSYSTEM({P1, P2, P3}) [F= ConcQueue::SPEC({P1, P2, P3})
assert ConcQueue::SPEC({P1, P2, P3}) [F= MSYSTEM({P1, P2, P3}) :[partial order reduce]
-- And also for four processes
assert MSYSTEM({P1, P2, P3, P4}) [F= ConcQueue::SPEC({P1, P2, P3, P4}) :[partial order reduce]
assert ConcQueue::SPEC({P1, P2, P3, P4}) [F= MSYSTEM({P1, P2, P3, P4}) :[partial order reduce]

-- Simple queue ignores begin and end events and only has single enqueue/dequeue events.
-- This is the simplest form of history we can have - just the operations.
-- ConcQueue::SPEC' hides the begin/end events and renames lin_* events to just single
-- enqueue/dequeue events. This means, we check that any behaviour of the concurrent
-- queue (ignoring begin/end) is reorderable??? Is this a linearizability test????
assert ConcQueue::SPEC'({P1}) [F= SimpleQueue::SPEC({P1}) :[partial order reduce]
assert SimpleQueue::SPEC({P1}) [T= ConcQueue::SPEC'({P1}) :[partial order reduce]
assert ConcQueue::SPEC'({P1, P2}) [F= SimpleQueue::SPEC({P1, P2}) :[partial order reduce]
assert SimpleQueue::SPEC({P1, P2}) [T= ConcQueue::SPEC'({P1, P2}) :[partial order reduce]
assert ConcQueue::SPEC'({P1, P2, P3}) [F= SimpleQueue::SPEC({P1, P2, P3}) :[partial order reduce]
assert SimpleQueue::SPEC({P1, P2, P3}) [T= ConcQueue::SPEC'({P1, P2, P3}) :[partial order reduce]
assert ConcQueue::SPEC'({P1, P2, P3, P4}) [F= SimpleQueue::SPEC({P1, P2, P3, P4}) :[partial order reduce]
assert SimpleQueue::SPEC({P1, P2, P3, P4}) [T= ConcQueue::SPEC'({P1, P2, P3, P4}) :[partial order reduce]

--assert SimpleQueue::SPEC({P1, P2, P3, P4}) [F= ConcQueue::SPEC'({P1, P2, P3, P4}) -- this one fails 
--assert SimpleQueue::SPEC({P1, P2, P3, P4}) [T= ConcQueue::SPEC'({P1, P2, P3, P4}) 

--assert ConcQueue::SPEC'({P1, P2, P3, P4}) [F= SimpleQueue::SPEC({P1, P2, P3, P4})
--assert ConcQueue::SPEC'({P1, P2, P3, P4}) [T= SimpleQueue::SPEC({P1, P2, P3, P4})


-- Or do we need to do something slightly different, where we remove the process id from the
-- events and just use the lin_event like that???? Maybe use an event that enqueue.v/dequeue.v?
-- Interleave that event with the lin_event???